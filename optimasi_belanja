#include <iostream>
#include <algorithm>
#include <fstream>
#include <vector>
#include <limits>
using namespace std;

struct Item
{
    string nama;
    int harga;
    int value;
    string kategori;
};

int totalHarga(const vector<Item> &daftarBarang) {
    int total = 0;
    for (const auto &item : daftarBarang) {
        total += item.harga;
    }
    return total;
}

void tampilkanInfoBudget(int budget, const vector<Item> &daftarBarang) {
    int total = totalHarga(daftarBarang);
    cout << "\nTotal Harga Belanja : Rp. " << total << '\n';
    cout << "Sisa Budget          : Rp. " << (budget - total) << "\n";
}

void tambahBarang(vector<Item> &daftarBarang)
{
    Item barang;
    char pil;    

    while (true)
    {
        cout << "-----------------------\n";
        cout << "Nama Barang     : "; 
        cin.ignore();
        getline(cin, barang.nama);

        while (true){
        cout << "Harga           : ";
        cin >> barang.harga;
        if (!cin.fail() && barang.harga > 0)
                break;
            cout << "Masukkan angka yang valid!\n";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }

        do {
            cout << "Berat (1-10)    : ";
            cin >> barang.berat;
        } while (barang.berat < 1 || barang.berat > 10);

        cout << "Kategori        : ";
        cin >> barang.kategori;
        daftarBarang.push_back(barang);
        cout << "-----------------------\n\n";

        cout << "Barang berhasil ditambahkan!\n";
        cout << "Tambah barang lagi? (y/n): ";
        cin >> pil;
        if (pil == 'n' || pil == 'N')
        {
            break;
        }
    }
}

void lihatDaftarBarang(const vector<Item> &daftarBarang)
{
    cout << "\n==== Daftar Barang ====\n";
    if (daftarBarang.empty())
    {
        cout << "Belum ada barang.\n";
        return;
    }
    for (size_t i = 0; i < daftarBarang.size(); ++i)
    {
        cout << "Barang #" << i + 1 << ":\n";
        cout << "Nama     : " << daftarBarang[i].nama << '\n';
        cout << "Harga    : " << daftarBarang[i].harga << '\n';
        cout << "Value    : " << daftarBarang[i].value << '\n';
        cout << "Kategori : " << daftarBarang[i].kategori << "\n\n";
    }
}

void undoBarangTerakhir(vector<Item> &daftarBarang)
{
    if (!daftarBarang.empty())
    {
        daftarBarang.pop_back();
        cout << "Barang terakhir berhasil dihapus.\n";
    }
    else
    {
        cout << "Daftar barang kosong. Tidak ada yang bisa dihapus.\n";
    }
}

void merge(vector<Item> &arr, int left, int mid, int right, const string &kunci) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<Item> L(n1), R(n2);

    for (int i = 0; i < n1; ++i)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; ++j)
        R[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;

    while (i < n1 && j < n2) {
        bool kondisi = false;
        if (kunci == "harga")
            kondisi = L[i].harga <= R[j].harga;
        else if (kunci == "berat")
            kondisi = L[i].berat <= R[j].berat;
        else if (kunci == "nama")
            kondisi = L[i].nama <= R[j].nama;

        if (kondisi)
            arr[k++] = L[i++];
        else
            arr[k++] = R[j++];
    }

    while (i < n1)
        arr[k++] = L[i++];
    while (j < n2)
        arr[k++] = R[j++];
}

void mergeSort(vector<Item> &arr, int left, int right, const string &kunci) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid, kunci);
        mergeSort(arr, mid + 1, right, kunci);
        merge(arr, left, mid, right, kunci);
    }
}

void hasilOptimasi(vector<Item> daftarBarang, int budget) {
    cout << "\n=== Hasil Optimasi Berdasarkan Berat/Harga ===\n";
    sort(daftarBarang.begin(), daftarBarang.end(), [](const Item &a, const Item &b) {
        double rasioA = (double)a.berat / a.harga;
        double rasioB = (double)b.berat / b.harga;
        return rasioA > rasioB;
    });

    vector<Item> hasil;
    int total = 0, totalBerat = 0;

    for (const auto &item : daftarBarang) {
        if (total + item.harga <= budget) {
            hasil.push_back(item);
            total += item.harga;
            totalBerat += item.berat;
        }
    }

    if (hasil.empty()) {
        cout << "Tidak ada kombinasi barang yang cocok dengan budget.\n";
        return;
    }

    for (const auto &item : hasil) {
        cout << "Nama     : " << item.nama << '\n';
        cout << "Harga    : Rp. " << item.harga << '\n';
        cout << "Berat    : " << item.berat << '\n';
        cout << "Kategori : " << item.kategori << "\n\n";
    }

    cout << "Total Harga : Rp. " << total << '\n';
    cout << "Total Berat : " << totalBerat << '\n';
    cout << "Sisa Budget : Rp. " << (budget - total) << '\n';
}

void menu(int budget, vector<Item> &daftarBarang)
{
    int pil;
    cout << "\n========================\n";
    cout << "      Menu Pilihan      \n";
    cout << "========================\n";
    cout << "1. Hasil Optimasi\n";
    cout << "2. Tambah Barang\n";
    cout << "3. Undo Barang Terakhir\n";
    cout << "4. Lihat Daftar Barang\n";
    cout << "5. Keluar\n";
    cout << "Masukkan pilihan: ";
    cin >> pil;

    switch (pil)
    {
    case 1:
        // hasilOptimasi(daftarBarang, budget);
        // tolong tambahin ya hehe
        cout << "[!] Fitur optimasi belum dibuat.\n";
        break;
   case 2:
    
        tambahBarang(daftarBarang);
         break;
    case 3:
    
        undoBarangTerakhir(daftarBarang);
         break;
    case 4:
    
        lihatDaftarBarang(daftarBarang);
         break;
    case 5:
        cout << "Keluar dari program...\n";
        exit(0);
    default:
        cout << "Pilihan tidak valid.\n";
         break;
    }
    tampilkanInfoBudget(budget, daftarBarang);
}

int main()
{
    int budget;
    vector<Item> daftarBarang;

    cout << "================================\n"
         << "  Optimalisasi Belanja Bulanan  \n"
         << "================================\n";
while (true){
    cout << "Masukkan budget anda: ";
    cin >> budget;
    if (!cin.fail() && budget > 0)
            break;
        cout << "Budget harus berupa angka dan lebih dari 0.\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }
    cout << "\n";

    // Tambah barang pertama kali
    cout << "-----------------------\n"
         << "Tambah barang ke daftar\n"
         << "-----------------------\n\n";
    tambahBarang(daftarBarang);

    // Menu interaktif
     while (true) {
        menu(budget, daftarBarang);
    }

    cout << "\nProgram selesai.\n";
    return 0;
}
